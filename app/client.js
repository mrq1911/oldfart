import * as anchor from '@project-serum/anchor';
import { Program } from '@project-serum/anchor';
import { PublicKey, Keypair, Connection, SystemProgram, SYSVAR_RENT_PUBKEY } from '@solana/web3.js';
import { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, getAssociatedTokenAddress } from '@solana/spl-token';
import { Oldfart } from './types/oldfart'; // This will be generated by Anchor

// Constants
const ORIGINAL_MINT = new PublicKey('9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump'); // FartCoin
const TOKEN_METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');

async function main() {
  // Connect to the Solana network
  const connection = new Connection('https://api.mainnet-beta.solana.com', 'confirmed');

  // Load wallet from local keypair file
  const wallet = new anchor.Wallet(Keypair.fromSecretKey(
      Buffer.from(JSON.parse(require('fs').readFileSync('/path/to/your/keypair.json', 'utf-8')))
  ));

  // Load the Oldfart program
  const provider = new anchor.AnchorProvider(connection, wallet, {
    preflightCommitment: 'confirmed',
  });
  anchor.setProvider(provider);
  const program = anchor.workspace.Oldfart as Program<Oldfart>;

  // Derive PDAs
  const [wrapperDataPDA] = await PublicKey.findProgramAddress(
      [Buffer.from('data'), ORIGINAL_MINT.toBuffer()],
      program.programId
  );

  const [wrapperMintPDA] = await PublicKey.findProgramAddress(
      [Buffer.from('wrapper'), ORIGINAL_MINT.toBuffer()],
      program.programId
  );

  const [metadataAccountPDA] = await PublicKey.findProgramAddress(
      [
        Buffer.from('metadata'),
        TOKEN_METADATA_PROGRAM_ID.toBuffer(),
        wrapperMintPDA.toBuffer()
      ],
      TOKEN_METADATA_PROGRAM_ID
  );

  const [vaultTokenAccountPDA] = await PublicKey.findProgramAddress(
      [Buffer.from('vault'), ORIGINAL_MINT.toBuffer()],
      program.programId
  );

  // Get or create the user's associated token accounts
  const userOriginalTokenAccount = await getAssociatedTokenAddress(
      ORIGINAL_MINT,
      wallet.publicKey
  );

  const userWrapperTokenAccount = await getAssociatedTokenAddress(
      wrapperMintPDA,
      wallet.publicKey
  );

  // Initialize the wrapper program (only needs to be done once)
  async function initialize() {
    // No need to provide name and symbol as they're preset in the program
    const uri = "https://arweave.net/oldfart-metadata-uri"; // Optional, can be omitted to use default

    console.log('Initializing oldfart token wrapper...');
    const tx = await program.methods
        .initialize(uri)
        .accounts({
          wrapperData: wrapperDataPDA,
          wrapperMint: wrapperMintPDA,
          originalMint: ORIGINAL_MINT,
          metadataAccount: metadataAccountPDA,
          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,
          mintAuthority: wallet.publicKey,
          payer: wallet.publicKey,
          authority: wallet.publicKey,
          systemProgram: SystemProgram.programId,
          tokenProgram: TOKEN_PROGRAM_ID,
          rent: SYSVAR_RENT_PUBKEY,
        })
        .rpc();

    console.log('Initialization successful with transaction:', tx);

    // You might need to create the vault token account separately
    // This is left as an exercise for implementation
  }

  // Wrap tokens
  async function wrap(amount: number) {
    console.log(`Wrapping ${amount} tokens...`);
    const tx = await program.methods
        .wrap(new anchor.BN(amount))
        .accounts({
          wrapperData: wrapperDataPDA,
          originalMint: ORIGINAL_MINT,
          wrapperMint: wrapperMintPDA,
          userOriginalTokenAccount: userOriginalTokenAccount,
          userWrapperTokenAccount: userWrapperTokenAccount,
          vaultTokenAccount: vaultTokenAccountPDA,
          userAuthority: wallet.publicKey,
          tokenProgram: TOKEN_PROGRAM_ID,
          associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
          rent: SYSVAR_RENT_PUBKEY,
        })
        .rpc();

    console.log('Wrap successful with transaction:', tx);
  }

  // Unwrap tokens
  async function unwrap(amount: number) {
    console.log(`Unwrapping ${amount} tokens...`);
    const tx = await program.methods
        .unwrap(new anchor.BN(amount))
        .accounts({
          wrapperData: wrapperDataPDA,
          originalMint: ORIGINAL_MINT,
          wrapperMint: wrapperMintPDA,
          userOriginalTokenAccount: userOriginalTokenAccount,
          userWrapperTokenAccount: userWrapperTokenAccount,
          vaultTokenAccount: vaultTokenAccountPDA,
          userAuthority: wallet.publicKey,
          tokenProgram: TOKEN_PROGRAM_ID,
          associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
          rent: SYSVAR_RENT_PUBKEY,
        })
        .rpc();

    console.log('Unwrap successful with transaction:', tx);
  }

  // Command line interface
  const command = process.argv[2];
  const amount = process.argv[3] ? parseInt(process.argv[3]) : 0;

  switch (command) {
    case 'init':
      await initialize();
      break;
    case 'wrap':
      if (!amount) {
        console.error('Please specify an amount to wrap');
        process.exit(1);
      }
      await wrap(amount);
      break;
    case 'unwrap':
      if (!amount) {
        console.error('Please specify an amount to unwrap');
        process.exit(1);
      }
      await unwrap(amount);
      break;
    default:
      console.log('Usage: node script.js [init|wrap|unwrap] [amount]');
  }
}

main().catch(err => {
  console.error(err);
  process.exit(1);
});
